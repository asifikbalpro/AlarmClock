/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AlarmClock;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.Date;
import javax.swing.Timer;

/**
 *
 * @author Asif
 */
public class Alarm extends javax.swing.JFrame {

    /**
     * Creates new form Alarm
     */
    Timer updateTimer;
    int DELAY = 100;
    
    private int hour;
    private int minute;
    private static boolean state = true;
    
   
    
    
    
    public Alarm() {
        initComponents();
        
        updateTimer = new Timer(DELAY, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
               Date currentTime = new Date();
               String formatTimStr = "hh:mm:ss";
               DateFormat formatTime = new SimpleDateFormat(formatTimStr);
               String formatedTimeString = formatTime.format(currentTime);
                               
               clock_time.setText(formatedTimeString);
              
               
               
            }
        });
        updateTimer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clock_time = new javax.swing.JLabel();
        jHH = new javax.swing.JTextField();
        jMM = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jSet = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        clock_time.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        clock_time.setText("00:00:00");

        jHH.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jHH.setText("0");
        jHH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jHHActionPerformed(evt);
            }
        });

        jMM.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jMM.setText("0");

        jLabel1.setText("note");

        jSet.setText("set Alarm");
        jSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jHH, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jMM, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(349, 349, 349))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clock_time)
                    .addComponent(jSet))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(clock_time, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jMM)
                    .addComponent(jHH, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSet)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(133, 133, 133))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void jHHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jHHActionPerformed
        // TODO add your handling code here:        
    }//GEN-LAST:event_jHHActionPerformed

    private void jSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSetActionPerformed
        // TODO add your handling code here:
        System.out.println("alarm set clicked");
        state = true;
        System.out.println("alarm has set");
        Thread t = new Thread(){
            public void run(){
                for(;;){
                    if(state == true){
                        try {
                            sleep(1);
                            if(LocalDateTime.now().getHour() > 12){
                                hour = LocalDateTime.now().getHour() - 12;
                            }
                            minute = LocalDateTime.now().getMinute();
                            
                            int hh = Integer.parseInt(jHH.getText());
                            int mm = Integer.parseInt(jMM.getText());
                            
                            if(hour == hh && minute == mm){ 
                                jLabel1.setText("alarm");
                                System.out.println("alarming");
                                break;
                            } 
                        } catch (Exception e) {
                        }
                    }
                }
            }
        };
        t.start();
    }//GEN-LAST:event_jSetActionPerformed

    /**
     * @param args the command line arguments
     */
//    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel clock_time;
    private javax.swing.JTextField jHH;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jMM;
    private javax.swing.JButton jSet;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the hour
     */
    public int getHour() {
        return hour;
    }

    /**
     * @param hour the hour to set
     */
    public void setHour(int hour) {
        this.hour = hour;
    }
}
