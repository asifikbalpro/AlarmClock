/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AlarmClock;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.Timer;
import sun.audio.AudioPlayer;
import sun.audio.AudioStream;


/**
 *
 * @author Asif
 */
public class Alarm extends javax.swing.JFrame {

    /**
     * Creates new form Alarm
     */
    private Timer updateTimer;
    private int DELAY = 100;
    
    private int hour;
    private int minute;
    private static boolean state = true;
    
    private int time = 0;
    
   
    
    
    
    public Alarm() {
        initComponents();
        
        updateTimer = new Timer(DELAY, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
               Date currentTime = new Date();
               String formatTimStr = "hh:mm:ss";
               DateFormat formatTime = new SimpleDateFormat(formatTimStr);
               String formatedTimeString = formatTime.format(currentTime);
                               
               clock_time.setText(formatedTimeString);
              
               
               
            }
        });
        updateTimer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clock_time = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jSet = new javax.swing.JButton();
        jHH = new javax.swing.JSpinner();
        jMM = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        clock_time.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        clock_time.setText("00:00:00");

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("note");

        jSet.setText("set Alarm");
        jSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSetActionPerformed(evt);
            }
        });

        jHH.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jHH.setModel(new javax.swing.SpinnerNumberModel(0, 0, 12, 1));

        jMM.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jMM.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(clock_time)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jHH, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jMM, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jSet)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(clock_time, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jMM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jHH))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSet)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void jSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSetActionPerformed
        // TODO add your handling code here:
        System.out.println("alarm set clicked");
        
        int hh = (int) jHH.getValue();
        int mm = (int) jMM.getValue();
        
                
        LocalDateTime now = LocalDateTime.now(); // 
        int h1 = now.getHour();
        int m1 = now.getMinute();
        int ss = now.getSecond();
        System.out.println("Now full " + now.toString());
        int now_in_seconds = Converter.get_seconds(now);
        System.out.println("Now " + now_in_seconds);
        int target_in_seconds = hh * 3600 + mm * 60;
        if (h1 > 12){
            // pm
            target_in_seconds += 12*3600;
        }
        System.out.println("To " + target_in_seconds);
        int time_remaining = target_in_seconds - now_in_seconds;
        System.out.println("Time to sleep " + time_remaining);
//        String time1 = hh+":"+mm+":00";
//        String time2 = h1+":"+m1+":"+ss;
//        
//        SimpleDateFormat format = new SimpleDateFormat();
//        /**
//         * TODO: calculate the time and convert into a sec.
//         * and use that variable on sleep();
//         */
//        Date date1 = format.parse(time1); // this is one of the problem
//        Date date2 = format.parse(time2); // problem
        
//        long diff = date2.getTime() - date1.getTime();

//        System.out.println(time1 +" "+ time2);

        System.out.println("alarm has set "+ hh + ":"+ mm);
        
        
        
        state = true;
        Thread t = new Thread(){
            @Override
            public void run(){
                for(;;){
                    if(state == true){
                        try {
                            sleep(time_remaining); // sleep for long time for saving processing power
                            // TODO. failsafe. if the program needs to sleep more then it sould not be more than 1 sec
                            if(LocalDateTime.now().getHour() > 12){
                                hour = LocalDateTime.now().getHour() - 12;
                            }
                            minute = LocalDateTime.now().getMinute();

                            if(hour == hh && minute == mm){ 
                                jLabel1.setText("alarm");
                                System.out.println("alarming");
                                alarmTune("music\\alarm_clock.mp3");
                                break;
                            } 
                        } catch (InterruptedException e) {
                            System.out.println("Exception " + e.toString());
                        } catch (UnsupportedAudioFileException ex) {
                            Logger.getLogger(Alarm.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (LineUnavailableException ex) {
                            Logger.getLogger(Alarm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
        };
        t.start();
    }//GEN-LAST:event_jSetActionPerformed

    public void alarmTune(String filepath) throws UnsupportedAudioFileException, LineUnavailableException{
        InputStream music;
        try {
            
//            AudioInputStream inputStream = AudioSystem.getAudioInputStream(new File(filepath));
//            Clip clip = AudioSystem.getClip();
//            clip.open(inputStream);
//            clip.start();
            
            
            
            music = new FileInputStream(new File(filepath));
            AudioStream audio = new AudioStream(music);
            AudioPlayer.player.start(audio);
        } catch (IOException e) {
            System.out.println("somethings worng");
        }
    }
    /**
     * @param args the command line arguments
     */
//    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel clock_time;
    private javax.swing.JSpinner jHH;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSpinner jMM;
    private javax.swing.JButton jSet;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the hour
     */
    public int getHour() {
        return hour;
    }

    /**
     * @param hour the hour to set
     */
    public void setHour(int hour) {
        this.hour = hour;
    }

    /**
     * @return the updateTimer
     */
    public Timer getUpdateTimer() {
        return updateTimer;
    }

    /**
     * @param updateTimer the updateTimer to set
     */
    public void setUpdateTimer(Timer updateTimer) {
        this.updateTimer = updateTimer;
    }
    

}
